///////////////////////////////////////////////////////////////////      Synchronizer     /////////////////////////////////////////////////////////


***************************************************************************       RTL CODE      ********************************************************

module sync(clock,reset,write_en_reg,detect_add,fifo_full,full0,full1,full2,empty0,empty1,empty2,data_in,
read_en_0,read_en_1,read_en_2,vld_0,vld_1,vld_2,soft_rst_0,soft_rst_1,soft_rst_2,write_en);
	input clock,reset,detect_add,write_en_reg,read_en_0,read_en_1,read_en_2,empty0,empty1,empty2,full0,full1,full2;
	input [1:0]data_in;
	output reg [2:0]write_en;
	output reg fifo_full;
	output reg soft_rst_0,soft_rst_1,soft_rst_2;
	output vld_0,vld_1,vld_2;
	reg [1:0]fifo_addr;
	reg [4:0]fifo_0_soft_rst;
	reg [4:0]fifo_1_soft_rst;
	reg [4:0]fifo_2_soft_rst;

	//capturing addr this will occurs when detect add is high 
		always@(posedge clock)
			begin 
				if(!reset)
					fifo_addr<=0;
				else if(detect_add)
					fifo_addr<=data_in;
				else 
					fifo_addr<=0;
					
			end
	// write enb signal when it is high we have to generate write enable(3bit)
		always@(*)
			begin 
				if(write_en_reg)
					case(fifo_addr)
						2'b00:write_en=3'b001;
						2'b01:write_en=3'b010;
						2'b10:write_en=3'b100;
						default:write_en=3'b000;
					endcase
				else
					write_en=3'b0;
			end
	// fifo full logic 
		always@(*)
			begin 
			case(fifo_addr)
				2'b00:fifo_full=full0;
				2'b01:fifo_full=full1;
				2'b10:fifo_full=full2;
			endcase
			end
	// valid out logic
		assign vld_0=!empty0;
		assign vld_1=!empty1;
		assign vld_2=!empty2;
	//time out logic for fifo 0;
	always@(posedge clock)
		begin 
		if(!reset)
			begin 
				soft_rst_0<=0;
				fifo_0_soft_rst<=0;
			end
		else if(!vld_0)
			begin 
				soft_rst_0<=0;
				fifo_0_soft_rst<=0;
			end
		else if(read_en_0)
			begin 
				soft_rst_0<=0;
				fifo_0_soft_rst<=0;
			end
		else if(fifo_0_soft_rst == 5'd29)
			begin 
				soft_rst_0<=1;
				fifo_0_soft_rst<=0;
			end
		else 
			begin 
				fifo_0_soft_rst<=fifo_0_soft_rst+1'b1;
				soft_rst_0<=0;
			end
		end
	//time out logic for fifo 1;
	always@(posedge clock)
		begin 
		if(!reset)
			begin 
				soft_rst_1<=0;
				fifo_1_soft_rst<=0;
			end
		else if(!vld_1)
			begin 
				soft_rst_1<=0;
				fifo_1_soft_rst<=0;
			end
		else if(read_en_1)
			begin 
				soft_rst_1<=0;
				fifo_1_soft_rst<=0;
			end
		else if(fifo_1_soft_rst == 5'd29)
			begin 
				soft_rst_1<=1;
				fifo_1_soft_rst<=0;
			end
		else 
			begin 
				fifo_1_soft_rst<=fifo_1_soft_rst+1'b1;
				soft_rst_1<=0;
			end
		end
	//time out logic for fifo 2;
	always@(posedge clock)
		begin 
		if(!reset)
			begin 
				soft_rst_2<=0;
				fifo_2_soft_rst<=0;
			end
		else if(!vld_2)
			begin 
				soft_rst_2<=0;
				fifo_2_soft_rst<=0;
			end
		else if(read_en_2)
			begin 
				soft_rst_2<=0;
				fifo_2_soft_rst<=0;
			end
		else if(fifo_2_soft_rst == 5'd29)
			begin 
				soft_rst_2<=1;
				fifo_2_soft_rst<=0;
			end
		else 
			begin 
				fifo_2_soft_rst<=fifo_2_soft_rst+1'b1;
				soft_rst_2<=0;
			end
		end
endmodule
				
						
