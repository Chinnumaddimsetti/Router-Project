///////////////////////////////////////////////////////////////////      Synchronizer     /////////////////////////////////////////////////////////


***************************************************************************       RTL CODE      ********************************************************


				
						
module sync(detect_add,data_in,write_enb_reg,clk,rstn,vld_out_0,vld_out_1,vld_out_2,read_enb_0,read_enb_1,read_enb_2,write_enb,fifo_full,empty_0,empty_1,empty_2,soft_reset_0,soft_reset_1,soft_reset_2,full_0,full_1,full_2);
	input detect_add,write_enb_reg,clk,rstn,empty_0,empty_1,empty_2,full_0,full_1,full_2,read_enb_0,read_enb_1,read_enb_2;
	input [1:0]data_in;
	output vld_out_0,vld_out_1,vld_out_2;
	output reg soft_reset_0,soft_reset_1,soft_reset_2,fifo_full;
	output reg [2:0]write_enb;
	reg [1:0]fifo_addr;
	reg [4:0]fifo_0_count_soft_reset;
	reg [4:0]fifo_1_count_soft_reset;
	reg [4:0]fifo_2_count_soft_reset;
	//capture the destination
	always@(posedge clk)
		begin 
			if(!rstn)
				fifo_addr<=0;
			else if(detect_add)
				fifo_addr<=data_in;
			else
				fifo_addr<=0;
		end
	// write enable signal
	always@(*)
		begin 
			if(write_enb_reg)	
				case(fifo_addr)
					2'b00:write_enb=3'b001;
					2'b01:write_enb=3'b010;
					2'b10:write_enb=3'b100;
					default:write_enb=3'b000;
				endcase
			else
				write_enb=3'b000;
		end
		
	// fifo full
	always@(*)
		begin 
			case(fifo_addr)
				2'b00:fifo_full=full_0;
				2'b01:fifo_full=full_1;
				2'b10:fifo_full=full_2;
				default:fifo_full=full_0;
			endcase
		end
	//valid out logic
	assign vld_out_0=!empty_0;
	assign vld_out_1=!empty_1;
	assign vld_out_2=!empty_2;
	//time out logic
	always@(posedge clk)
		begin 
			if(!rstn)
				begin 
					soft_reset_0<=0;
					fifo_0_count_soft_reset<=0;
				end
			else if(!vld_out_0)
				begin 
					soft_reset_0<=0;
					fifo_0_count_soft_reset<=0;
				end
			else if(read_enb_0)
				begin 
					soft_reset_0<=0;
					fifo_0_count_soft_reset<=0;
				end
			else if(fifo_0_count_soft_reset==5'd29)
				begin 
					soft_reset_0<=1;
					fifo_0_count_soft_reset<=0;
				end
			else 
				begin 
				fifo_0_count_soft_reset<=fifo_0_count_soft_reset+1'b1;
				soft_reset_0<=0;
				end
			end
	always@(posedge clk)
		begin 
			if(!rstn)
				begin 
					soft_reset_1<=0;
					fifo_1_count_soft_reset<=0;
				end
			else if(!vld_out_1)
				begin 
					soft_reset_1<=0;
					fifo_1_count_soft_reset<=0;
				end
			else if(read_enb_1)
				begin 
					soft_reset_1<=0;
					fifo_1_count_soft_reset<=0;
				end
			else if(fifo_1_count_soft_reset==5'd29)
				begin 
					soft_reset_1<=1;
					fifo_1_count_soft_reset<=0;
				end
			else 
				begin 
				fifo_1_count_soft_reset<=fifo_1_count_soft_reset+1'b1;
				soft_reset_1<=0;
				end
			end
	always@(posedge clk)
		begin 
			if(!rstn)
				begin 
					soft_reset_2<=0;
					fifo_2_count_soft_reset<=0;
				end
			else if(!vld_out_2)
				begin 
					soft_reset_2<=0;
					fifo_2_count_soft_reset<=0;
				end
			else if(read_enb_2)
				begin 
					soft_reset_2<=0;
					fifo_2_count_soft_reset<=0;
				end
			else if(fifo_2_count_soft_reset==5'd29)
				begin 
					soft_reset_2<=1;
					fifo_2_count_soft_reset<=0;
				end
			else 
				begin 
				fifo_2_count_soft_reset<=fifo_2_count_soft_reset+1'b1;
				soft_reset_2<=0;
				end
			end
endmodule



/*                                                         TB CODE                                                                                 */



module tb;
	reg detect_add,write_enb_reg,clk,rstn,empty_0,empty_1,empty_2,full_0,full_1,full_2,read_enb_0,read_enb_1,read_enb_2;
	reg [1:0]data_in;
	wire vld_out_0,vld_out_1,vld_out_2;
	wire soft_reset_0,soft_reset_1,soft_reset_2,fifo_full;
	wire [2:0]write_enb;
sync DUT(detect_add,data_in,write_enb_reg,clk,rstn,vld_out_0,vld_out_1,vld_out_2,read_enb_0,read_enb_1,read_enb_2,write_enb,fifo_full,empty_0,empty_1,empty_2,soft_reset_0,soft_reset_1,soft_reset_2,full_0,full_1,full_2);
	initial 
		begin 
			clk=0;
			forever #5 clk=~clk;
		end
	task reset;
		begin 
			@(negedge clk)	
				rstn=0;
			@(negedge clk)
				rstn=1;
		end
	endtask
	task initialize;
		begin 
		{rstn,detect_add,write_enb_reg,read_enb_0,read_enb_1,read_enb_2,full_0,full_1,full_2,empty_0,empty_1,empty_2}=0;
		end
	endtask
	task ip(input a,b,input[1:0]c);
		begin 
			@(negedge clk)
				{detect_add,data_in}={a,c};
			@(negedge clk)
				write_enb_reg=b;
		end
	endtask
	task empty(input d,e,f);
		{empty_0,empty_1,empty_2}={d,e,f};
	endtask
	task full(input g,h,i);
		{full_0,full_1,full_2}={g,h,i};
	endtask
	task read_en(input j,k,l);
		begin
			@(negedge clk)
				{read_enb_0,read_enb_1,read_enb_2}={j,k,l};
			end
	endtask
initial
begin
initialize;
reset;
ip(1'b1,1'b1,2'b00);
/*ip(1'b1,1'b1,2'b01);
ip(1'b1,1'b1,2'b10);
*/
empty(0,1,1);
full(1,0,0);
read_en(1,0,0);
read_en(0,0,0);

end

endmodule
	
