//////////////////////////////////////////////////////////////////////////////////////       FSM BLOCK    /////////////////////////////////////////////////////////////////////

*********************************************************************************   RTL CODE   *****************************************************************************
module fsm(
    input clock, reset, pkt_valid, parity_done, soft_rst_0, soft_rst_1, soft_rst_2,
    input fifo_full, low_pkt_valid, fifo_empty_0, fifo_empty_1, fifo_empty_2,
    input [1:0] data_in,
    output busy, detect_add, ld_state, laf_state, full_state, write_enb_reg, rst_int_reg, lfd_state
);

    parameter DECODE_ADDRESS = 3'b000,
              LOAD_FIRST_DATA = 3'b001,
              LOAD_DATA = 3'b010,
              WAIT_TILL_EMPTY = 3'b011,
              LOAD_PARITY = 3'b100,
              FIFO_FULL_STATE = 3'b101,
              LOAD_AFTER_FULL = 3'b110,
              CHECK_PARITY_ERROR = 3'b111;
              
    reg [2:0] state, n_state;
    reg [1:0] addr;

    always @(posedge clock) begin
        if (!reset)
            state <= DECODE_ADDRESS;
        else if (soft_rst_0 || soft_rst_1 || soft_rst_2)
            state <= DECODE_ADDRESS;
        else 
            state <= n_state;
            
        addr <= data_in;
    end

    always @(*) begin
        n_state = DECODE_ADDRESS;
        case (state)
            DECODE_ADDRESS: begin
                if ((pkt_valid && (data_in == 2'b00) && fifo_empty_0) ||
                    (pkt_valid && (data_in == 2'b01) && fifo_empty_1) ||
                    (pkt_valid && (data_in == 2'b10) && fifo_empty_2))
                    n_state = LOAD_FIRST_DATA;
                else if ((pkt_valid && (data_in == 2'b00) && ~fifo_empty_0) ||
                         (pkt_valid && (data_in == 2'b01) && ~fifo_empty_1) ||
                         (pkt_valid && (data_in == 2'b10) && ~fifo_empty_2))



*********************************************************************************   TB CODE   ******************************************************************************
