//////////////////////////////////////////////////////////////////////////////////////       FSM BLOCK    /////////////////////////////////////////////////////////////////////

*********************************************************************************   RTL CODE   *****************************************************************************

module fsm(clk,rstn,pkt_valid,busy,parity_done,data_in,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);
	input clk,rstn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2;
	input [1:0]data_in;
	reg [2:0]state,n_state;
	reg [1:0]addr;
	output busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state;
	parameter decode_address=3'b000,
				load_first_data=3'b001,
				load_data=3'b010,
				wait_till_empty=3'b011,
				fifo_full_state=3'b100,
				load_parity=3'b101,
				load_after_full=3'b110,
				check_parity_error=3'b111;
	always@(posedge clk)
		begin 
			if(!rstn)
				state<=decode_address;
			else if(soft_reset_0 || soft_reset_1 ||soft_reset_2)
				state<=decode_address;
			else 
				begin 
					state<=n_state;
					addr<=data_in;
				end
		end
	always@(*)	
		begin 
			n_state=decode_address;
			case(state)
				decode_address:
				begin
			if((pkt_valid && (data_in==2'd0) && fifo_empty_0) || 
				(pkt_valid && (data_in==2'd1) && fifo_empty_1) ||
				(pkt_valid && (data_in==2'd2) && fifo_empty_2))
				n_state=load_first_data;

			else if((pkt_valid && (data_in==2'd0) && !fifo_empty_0) || 
				(pkt_valid && (data_in==2'd1) && !fifo_empty_1) ||
				(pkt_valid && (data_in==2'd2) && !fifo_empty_2))
				n_state= wait_till_empty;
			else
				n_state=decode_address;
		end
		wait_till_empty:
			begin 
				if( (fifo_empty_0 && (addr==2'd0)) ||
				(fifo_empty_1 && (addr==2'd1)) ||
				(fifo_empty_2 && (addr==2'd2)) )
				n_state=load_first_data;
			else
				n_state=wait_till_empty;
		end

		load_first_data:
			n_state=load_data;

		load_data:
		begin
			if(fifo_full)
				n_state=fifo_full_state;
			else if(!fifo_full && !pkt_valid)
				n_state=load_parity;
			else
				n_state=load_data;
		end
		load_parity:
			n_state = check_parity_error;

		fifo_full_state:
		begin
			if(fifo_full)
				n_state=fifo_full_state;
			else if(!fifo_full)
				n_state=load_after_full;
			else
				n_state=n_state;
		end
		load_after_full:
		begin
			if(!parity_done && low_pkt_valid)
				n_state=load_parity;
			else if(!parity_done && !low_pkt_valid)
				n_state=load_data;
			else if(parity_done)
				n_state=decode_address;
			else
				n_state=n_state;
		end
		check_parity_error:
		begin
			if(!fifo_full)
				n_state=decode_address;
			else if(fifo_full)
				n_state=fifo_full_state;
			else
				n_state=n_state;
		end
		endcase
end
assign busy= ((state==decode_address) || (state==load_data)) ? 1'b0 :1'b1;
assign detect_add=(state==decode_address) ? 1'b1:1'b0;
assign ld_state=(state==load_data) ? 1'b1:1'b0;
assign laf_state=(state==load_after_full) ? 1'b1:1'b0;
assign full_state=(state==fifo_full_state) ? 1'b1:1'b0;
assign write_enb_reg=((state==load_first_data) || (state==load_data) || (state==load_parity) || (state==load_after_full) ) ? 1'b1:1'b0;
assign rst_int_reg=(state==check_parity_error) ? 1'b1:1'b0;
assign lfd_state=(state==load_first_data) ? 1'b1:1'b0;
endmodule		
					
					

*********************************************************************************   TB CODE   ******************************************************************************


module fsm_tb();
reg clk,rstn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2;
reg [1:0]data_in;
wire busy,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state;

fsm dut(clk,rstn,pkt_valid,busy,parity_done,data_in,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,detect_add,ld_state,laf_state,full_state,write_enb_reg,rst_int_reg,lfd_state);

initial
begin
	clk=1'b0;
	forever #5 clk=~clk;
end


task sreset;
	begin
		@(negedge clk)
		{soft_reset_0,soft_reset_1,soft_reset_2}=3'b111;
		@(negedge clk)
		{soft_reset_0,soft_reset_1,soft_reset_2}=0;
	end
endtask

task reset;
	begin
		@(negedge clk)
		rstn=1'b0;
		@(negedge clk)
		rstn=1'b1;
	end
endtask
task initialize;
	begin 
	{clk,rstn,pkt_valid,parity_done,soft_reset_0,soft_reset_1,soft_reset_2,fifo_full,low_pkt_valid,fifo_empty_0,fifo_empty_1,fifo_empty_2,data_in}=0;
	end
endtask
task t1;
	begin
		@(negedge clk)
		pkt_valid=1;
		data_in=2'b00;
		fifo_empty_0=1;
		@(negedge clk)
		@(negedge clk)
		pkt_valid=0;
		fifo_full=0;
		@(negedge clk)
		fifo_full=0;
	end
endtask
task t2;
	begin
		@(negedge clk)
		pkt_valid=1;
		data_in=2'b00;
		fifo_empty_0=1;
		@(negedge clk)
		@(negedge clk)
		fifo_full=1;
		@(negedge clk)
		fifo_full=0;
		@(negedge clk)
		parity_done=0;
		low_pkt_valid=1;
		@(negedge clk)
		fifo_full=0;
		low_pkt_valid=0;
	end
endtask

task t3;
	begin
		@(negedge clk)
		pkt_valid=1;
		data_in=2'b00;
		fifo_empty_0=1;
		@(negedge clk)
		@(negedge clk)
		fifo_full=1;
		@(negedge clk)
		parity_done=0;
		low_pkt_valid=0;
		@(negedge clk)
		fifo_full=0;
		pkt_valid=0;
		@(negedge clk)
		fifo_full=0;
		
	end
endtask


task t4;
	begin
		@(negedge clk)
		pkt_valid=1;
		data_in=2'b00;
		fifo_empty_0=1;
		@(negedge clk)
		@(negedge clk)
		fifo_full=0;
		pkt_valid=0;
		@(negedge clk)
		@(negedge clk)
		fifo_full=1;
		@(negedge clk)
		fifo_full=0;
		@(negedge clk)
		parity_done=1;
	end
endtask

initial
begin
initialize;
	reset;
	sreset;

	t1;
	#40;
	t2;
	#40;
	t3;
	#40;
	t4;
end
endmodule
